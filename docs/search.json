[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project 1",
    "section": "",
    "text": "Throughout the first couple weeks of this course, we have been learning how to effectively program in R. Many of the topics of discussion revolve around the topic of Data Science, and how to use it to work with data in a way in which it tells a story. In this project, we will be doing just that. Over the course of this report, we will be working through the process of working with raw data to create clean data sets that can be used to create summaries through plots."
  },
  {
    "objectID": "Project1.html#data-processing-functions",
    "href": "Project1.html#data-processing-functions",
    "title": "Project 1",
    "section": "Data Processing Functions",
    "text": "Data Processing Functions\nFor the second raw data set, we will parse through the data as done before; however, it will be done by using functions to perform each of the steps you saw in the previous section. Using functions allows our code to become more flexible and concise. Instead of writing long sections of code over and over again, we can write a function that performs many operations and use it throughout the program. This concept will be detailed here, and information about the specific steps can be found in the previous section\n\nParsing Step Functions\nThe following function will perform the first two steps:\n\nstep_1_2_funct &lt;- function(df, value_col = \"Enrollment\"){\n  df &lt;- df |&gt;\n    select(\"area_name\" = Area_name, STCOU, ends_with(\"D\")) |&gt;\n    pivot_longer(cols = 3:12, names_to = \"Enrollment\",\n                 values_to = \"Enrollment_Number\")\n  \n  return(df)\n}\n\nThe next function will perform step 3:\n\nstep_3_funct &lt;- function(df){\n  df &lt;- df |&gt;\n    mutate(Year = as.character(1900 + as.numeric(substr(Data_1$Enrollment, 8,\n                                                        9)))) |&gt;\n    mutate(Course_Year=paste0(substr(Enrollment,1,7),\n                              Year)) |&gt;\n    collect() \n  \n  return(df)\n}\n\nThe following functions will be written out of order (step 5, 6, then 4). This first function will be for step 5\n\nstep_5_funct &lt;- function(County){\n  County &lt;- County |&gt; \n    mutate(State_abbr=trimws(substr(area_name,\n                                    nchar(area_name)-2,                                                              nchar(area_name)))) |&gt;\n    collect() |&gt;\n    as.tibble()\n  \n  return(County)\n}\n\nThe next function will be for step 6. The code itself is not visually appealing, but it is using the flexibility of the ifelse() function.\n\nstep_6_funct &lt;- function(State){\n  State &lt;- State |&gt;\n    mutate(Division = ifelse(area_name %in% c(\"CONNECTICUT\",\"MAINE\",\"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\",\"VERMONT\"), \"NEW ENGLAND\", \nifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"MID ATLANTIC\",\nifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"EAST NORTH CENTRAL\",\nifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\",\"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"WEST NORTH CENTRAL\",\nifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"WEST VIRGINIA\"), \"SOUTH ATLANTIC\",\nifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"EAST SOUTH CENTRAL\",\nifelse(area_name %in% c(\"ARKANSAS\", \"LOISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"WEST SOUTH CENTRAL\",\nifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANTA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"MOUNTAIN\",\nifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"PACIFIC\", \"ERROR\")))))))))) |&gt;\n   collect() |&gt;\n    as.tibble()\n\n return(State)\n  \n}\n\nThis last function will be for completing steps 4, 5 and 6. Step 4 will be the first chunk of code you see, and then we will make use of the functions for step 5 and 6 above:\n\nstep_4_5_6_funct &lt;- function(df){\n  # Step 4\n  County &lt;- df[grep(pattern = \", \\\\w\\\\w\", df$area_name),] |&gt;\n    mutate(State_abbr=trimws(substr(area_name, nchar(area_name)-2,\n                                    nchar(area_name)))) |&gt;\n      collect()\n  \n  class(County) &lt;- c(\"County\", class(County))\n  \n  State &lt;- df[-grep(pattern = \", \\\\w\\\\w\", df$area_name),] |&gt;\n    collect()\n  class(State) &lt;- c(\"State\", class(State))\n  \n  County &lt;- as.tibble(County)\n  State  &lt;- as.tibble(State)\n  \n  #Step 5\n  County &lt;- step_5_funct(County)\n\n  #Step 6\n  State  &lt;- step_6_funct(State)\n  \n  Data &lt;- list(County, State)\n \n return(Data)\n  \n}\n\nNow that we have all of our functions for each step, we can then use a wrapper function to combine the step functions.\n\nwrapper_function &lt;- function(url, default_var_name = \"Enrollment\") {\n  df &lt;- read_csv(url)\n  df &lt;- step_1_2_funct(df)\n  df &lt;- step_3_funct(df)\n  df &lt;- step_4_5_6_funct(df)\n  \n  return(df)\n}\n\nNow that we have created a function that parses through the data set as needed, using functions within for each step of parsing, we can then apply it to different data sets. This will be detailed in the next section"
  },
  {
    "objectID": "Project1.html#data-combination-function",
    "href": "Project1.html#data-combination-function",
    "title": "Project 1",
    "section": "Data Combination Function",
    "text": "Data Combination Function\nIn this section, we will use our newly created data processing function (wrapper_function) to read in and parse through the two raw data sets. These two raw data sets are very similar, and we want to be able to combine the non-county and county-level data from each data set. This provides the need to create a new function that takes in the result of the two calls to the data processing function, and combines the two non-county and two county-level data sets. The result of this function should be one object, that holds the combined non-county and county-level data sets.\n\n#Read in data sets \nurla &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\"\nurlb &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\"\nData_a &lt;- wrapper_function(urla, default_var_name = \"Enrollment\")\nData_b &lt;- wrapper_function(urlb, default_var_name = \"Enrollment\")\n\n#Combine non-county and county-level data sets\ncombine_function &lt;- function(a, b){\n  Counties &lt;- bind_rows(a[[1]], b[[1]])\n  class(Counties) &lt;- c(\"Counties\", class(Counties))\n\n  States &lt;- bind_rows(a[[2]], b[[2]])\n  class(States) &lt;- c(\"States\", class(States))\n  \n  combined_data &lt;- list(Counties, States)\n  \n  return(combined_data)\n}\n\n#Check to see if function works\ncombine_function(Data_a, Data_b)\n\n[[1]]\n# A tibble: 62,900 × 7\n   area_name   STCOU Enrollment Enrollment_Number Year  Course_Year State_abbr\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;     \n 1 Autauga, AL 01001 EDU010187D              6829 1987  EDU01011987 AL        \n 2 Autauga, AL 01001 EDU010188D              6900 1988  EDU01011988 AL        \n 3 Autauga, AL 01001 EDU010189D              6920 1989  EDU01011989 AL        \n 4 Autauga, AL 01001 EDU010190D              6847 1990  EDU01011990 AL        \n 5 Autauga, AL 01001 EDU010191D              7008 1991  EDU01011991 AL        \n 6 Autauga, AL 01001 EDU010192D              7137 1992  EDU01011992 AL        \n 7 Autauga, AL 01001 EDU010193D              7152 1993  EDU01011993 AL        \n 8 Autauga, AL 01001 EDU010194D              7381 1994  EDU01011994 AL        \n 9 Autauga, AL 01001 EDU010195D              7568 1995  EDU01011995 AL        \n10 Autauga, AL 01001 EDU010196D              7834 1996  EDU01011996 AL        \n# ℹ 62,890 more rows\n\n[[2]]\n# A tibble: 1,060 × 7\n   area_name     STCOU Enrollment Enrollment_Number Year  Course_Year Division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D          40024299 1987  EDU01011987 ERROR   \n 2 UNITED STATES 00000 EDU010188D          39967624 1988  EDU01011988 ERROR   \n 3 UNITED STATES 00000 EDU010189D          40317775 1989  EDU01011989 ERROR   \n 4 UNITED STATES 00000 EDU010190D          40737600 1990  EDU01011990 ERROR   \n 5 UNITED STATES 00000 EDU010191D          41385442 1991  EDU01011991 ERROR   \n 6 UNITED STATES 00000 EDU010192D          42088151 1992  EDU01011992 ERROR   \n 7 UNITED STATES 00000 EDU010193D          42724710 1993  EDU01011993 ERROR   \n 8 UNITED STATES 00000 EDU010194D          43369917 1994  EDU01011994 ERROR   \n 9 UNITED STATES 00000 EDU010195D          43993459 1995  EDU01011995 ERROR   \n10 UNITED STATES 00000 EDU010196D          44715737 1996  EDU01011996 ERROR   \n# ℹ 1,050 more rows\n\n\nNow that we have successfully combined the raw data and created an object to hold the two new data sets, we can now look to create functions for summarizing."
  }
]